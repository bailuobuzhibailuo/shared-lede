#
# Copyright (C) 2022 hugcabbage <fengsongtianxia@gmail.com>
#
# This is free software, licensed under the MIT License.
#
# <https://github.com/hugcabbage/shared-lede>
#
# 源码采用lean lede或者lienol openwrt master分支
#
name: 固件编译

on:
  workflow_dispatch:
    inputs:
      build:
        description: '若要编译固件，请输入true'
        required: true
        default: 'true'
        type: string
      model:
        description: '选择设备'
        required: true
        type: choice
        options:
          - 'xiaomi-4a-gigabit'
          - 'xiaomi-3g-v2'
          - 'xiaomi-cr6608'
          - 'xiaomi-cr6606'
          - 'xiaomi-cr6609'
          - 'xiaomi-3g'
          - 'xiaomi-4'
          - 'xiaomi-3-pro'
          - 'redmi-ac2100'
          - 'xiaomi-ac2100'
          - 'phicomm-k2p'
          - 'redmi-ax6s'
          - 'xiaomi-4a-100m'
          - 'xiaomi-4c'
          - 'miwifi-nano'
          - 'glinet-mt300n-v2'
          - 'glinet-microuter-n300'
          - 'miwifi-mini'
          - 'miwifi-r3'
      record:
        description: '输入版本描述'     
        required: false
        default: '升级内容：内核升级，更新应用版本'
        type: string
      cpu_overclock:
        description: '超频到1100Mhz(仅适用于5.10内核)'
        required: false
        type: boolean
      kernel_5_15:
        description: '使用5.15内核'
        required: false
        type: boolean
      release:
        description: '上传到release'
        required: false
        default: true
        type: boolean
      artifact:
        description: '上传到artifact'
        required: false
        type: boolean

jobs:
  build:
    name: 固件编译
    if: inputs.build == 'true'
    runs-on: ubuntu-latest
    steps:

      - name: 初始空间情况
        run: |
          df -h

      - name: Checkout
        uses: actions/checkout@v3

      - name: 环境准备
        run: |
          sudo apt-get update
          sudo apt-get -y install \
            antlr3 asciidoc autoconf automake autopoint binutils build-essential \
            bzip2 device-tree-compiler flex g++-multilib gawk gcc-multilib \
            gettext git gperf lib32gcc1 libc6-dev-i386 libelf-dev libglib2.0-dev \
            libncurses5-dev libssl-dev libtinfo5 libtool libz-dev msmtp p7zip \
            p7zip-full patch python3 qemu-utils subversion swig texinfo uglifyjs \
            unzip upx xmlto zip zlib1g-dev
          sudo apt-get clean
          pip install -r extra-files/requirements-build.txt

      - name: 读取配置
        id: transit
        env:
          TARGET_SE: preset-models/transit.py
          MODEL_NAME: ${{ inputs.model }}
          TEMP_PREFIX: temp
        run: |
          # MODEL_NAME和TEMP_PREFIX为transit.py必要读取的变量
          echo "你选择了：$MODEL_NAME"
          FILEPATHS=($(python3 $TARGET_SE)) && echo "$FILEPATHS"
          echo "CLONE_SH=${FILEPATHS[1]}" >> $GITHUB_OUTPUT
          echo "MODIFY_SH=${FILEPATHS[2]}" >> $GITHUB_OUTPUT
          echo "DOT_CONFIG=${FILEPATHS[3]}" >> $GITHUB_OUTPUT
          echo "RELEASE_TEXT=${FILEPATHS[4]}" >> $GITHUB_OUTPUT

      - name: 下载源码与插件
        env:
          CLONE_SH: ${{ steps.transit.outputs.CLONE_SH }}
        run: |
          chmod +x $CLONE_SH
          $CLONE_SH

      - name: 升级feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 修改配置
        env:
          MODIFY_SH: ${{ steps.transit.outputs.MODIFY_SH }}
        run: |
          ${{ inputs.cpu_overclock }} && sed -i '/322-mt7621-fix-cpu-clk-add-clkdev.patch/ s/#//' $MODIFY_SH
          ${{ inputs.kernel_5_15 }} && sed -i '/KERNEL_PATCHVER:=5.15/ s/#//' $MODIFY_SH
          chmod +x $MODIFY_SH
          $MODIFY_SH

      - name: 生成.config文件
        env:
          DOT_CONFIG: ${{ steps.transit.outputs.DOT_CONFIG }}
        run: |
          mv -f $DOT_CONFIG .config
          make defconfig

      - name: 下载编译资源
        run: |
          make download -j8 || make download -j1 V=s

      - name: 编译
        run: |
          make -j$(nproc) || make -j1 V=s

      - name: 整理固件目录
        run: |
          mkdir -p ./collected_firmware/packages
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./collected_firmware
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./collected_firmware/packages
          cd collected_firmware
          zip -r ./allfiles.zip ./*
          cd packages
          zip -r ../packages.zip ./*

      - name: 读取release文本
        id: release-text
        if: inputs.release == true && env.RELEASE_FIRMWARE_VALUE != ''
        env:
          RELEASE_TEXT: ${{ steps.transit.outputs.RELEASE_TEXT }}
          RELEASE_FIRMWARE_VALUE: ${{ secrets.RELEASE_FIRMWARE }}
        run: |
          echo "RELEASE_TITLE=$(sed -n '1p' $RELEASE_TEXT)" >> $GITHUB_OUTPUT
          echo 'RELEASE_BODY<<EOF' >> $GITHUB_OUTPUT
          sed -n '2,$p' $RELEASE_TEXT >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: 计算tag版本
        id: tag-version
        if: steps.release-text.conclusion == 'success'
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.RELEASE_FIRMWARE }}
          dry_run: true

      - name: 上传固件到release
        id: to-release
        if: steps.release-text.conclusion == 'success'
        continue-on-error: true
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.RELEASE_FIRMWARE }}
          file: collected_firmware/*
          tag: ${{ steps.tag-version.outputs.new_tag }}
          release_name: ${{ steps.tag-version.outputs.new_version }} ${{ steps.release-text.outputs.RELEASE_TITLE }}
          overwrite: true
          prerelease: false
          body: |
            ${{ steps.release-text.outputs.RELEASE_BODY }}
            ${{ inputs.record }}
          file_glob: true

      - name: 上传固件到artifact
        if: inputs.artifact == true || steps.to-release.outcome != 'success'
        uses: actions/upload-artifact@v3
        with:
          name: collected_firmware
          path: |
            collected_firmware/
            !collected_firmware/*.zip

      - name: 空间使用情况
        run: |
          df -h
          echo "======================="
          du -h ./ --max-depth=1
